[{"title":"Write a small To Do App using Go","description":"\nThe app should contain the basic features of a todo list plus:\n\n- Served as a CLI or Rest API;\n- Session-based To Dos;\n- Handle DB encryption for secure notes;\n\nFeel free to reinvent the wheel and overcomplicate the features. The goal is to learn the fantastic Go Programming Language.\n","done_at":"","created_at":"19 Jan 24 16:32 CET"},{"title":"Solve text rendering with correct line-break","description":"\nThis line should break when it ends to be properly rendered when listing the to do item.\n\nAbove this line, a line-break must be added. Lists are also rendered correctly:\n\n- This;\n- is;\n- a;\n- list;\n\nLet's see.\n","done_at":"22 Jan 24 12:35 CET","created_at":"19 Jan 24 16:45 CET"},{"title":"Implement the \"edit\" feature","description":"\nThe feature behaves similarly with \"add\". The editable content should be open inside Vim.\n\nProposed API:\n\n```shell\n$ todo edit \u003cid\u003e\n```\n","done_at":"28 Jan 24 14:53 CET","created_at":"19 Jan 24 17:13 CET"},{"title":"Implement the \"mark as done\" feature","description":"\nMark an item as completed by updating the Item.DoneAt with the current time and saving it.\n\nProposed API:\n\n```shell\ntodo done \u003cid\u003e\n```\n","done_at":"22 Jan 24 12:28 CET","created_at":"19 Jan 24 17:23 CET"},{"title":"Implement the \"view\" feature","description":"\nView an item by specifying its ID.\n\nProposed API:\n\n```shell\ntodo view \u003cid\u003e\n```\n","done_at":"20 Jan 24 17:23 CET","created_at":"19 Jan 24 17:23 CET"},{"title":"Implement the \"remove\" feature.","description":"\nThe feature must include the possibility to remove one or more items at once and a flag to remove only completed items.\n\nProposed API:\n```shell\n$ todo remove 1 # Removes one item\n$ todo remove 1 2 # Removes multiple items\n$ todo remove -c # Removes completed items\n```\n\nConstraints:\n- If an item is not done, ask deletion confirmation;\n\n","done_at":"","created_at":"22 Jan 24 13:15 CET"}]