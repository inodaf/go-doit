[
  {
    "title": "Write a small To Do App using Go",
    "description": "\nThe app should contain the basic features of a todo list plus:\n\n- Served as a CLI or Rest API;\n- Session-based To Dos;\n- Handle DB encryption for secure notes;\n- Persistent session with a REPL-like interactive mode;\n- Password protected notes;\n\nFeel free to reinvent the wheel and overcomplicate the features. The goal is to learn the fantastic Go Programming Language.\n",
    "done_at": "",
    "created_at": "19 Jan 24 16:32 CET",
    "update_at": ""
  },
  {
    "title": "Solve text rendering with correct line-break",
    "description": "\nThis line should break when it ends to be properly rendered when listing the to do item.\n\nAbove this line, a line-break must be added. Lists are also rendered correctly:\n\n- This;\n- is;\n- a;\n- list;\n\nLet's see. This should be saved into DB \n",
    "done_at": "12 May 24 21:14 CEST",
    "created_at": "19 Jan 24 16:45 CET",
    "update_at": "12 May 24 21:14 CEST"
  },
  {
    "title": "Implement the \"edit\" feature",
    "description": "\nThe feature behaves similarly with \"add\". The editable content should be open inside Vim.\n\nProposed API:\n\n```shell\n$ todo edit \u003cid\u003e\n```\n",
    "done_at": "28 Jan 24 14:53 CET",
    "created_at": "19 Jan 24 17:13 CET",
    "update_at": ""
  },
  {
    "title": "Implement the \"mark as done\" feature",
    "description": "\nMark an item as completed by updating the Item.DoneAt with the current time and saving it.\n\nProposed API:\n\n```shell\ntodo done \u003cid\u003e\n```\n",
    "done_at": "07 May 24 22:49 CEST",
    "created_at": "19 Jan 24 17:23 CET",
    "update_at": "07 May 24 22:49 CEST"
  },
  {
    "title": "Implement the \"view\" feature",
    "description": "\nView an item by specifying its ID.\n\nProposed API:\n\n```shell\ntodo view \u003cid\u003e\n```\n",
    "done_at": "20 Jan 24 17:23 CET",
    "created_at": "19 Jan 24 17:23 CET",
    "update_at": ""
  },
  {
    "title": "Implement the \"remove\" feature",
    "description": "\nThe feature must include the possibility to remove one or more items at once and a flag to remove all completed items.\n\nProposed API\n```shell\n$ todo remove 1   # Removes one item\n$ todo remove 1 2 # Removes multiple items\n$ todo remove -c  # Removes all completed items\n```\n\nConstraints:\n- If an item is not done, ask deletion confirmation;\n\nNotes:\nThe database integration must be done first before assigning this task.\n\n",
    "done_at": "",
    "created_at": "22 Jan 24 13:15 CET",
    "update_at": "09 May 24 13:10 CEST"
  },
  {
    "title": "Migrate the Store to a SQL Database",
    "description": "\nCurrently we use a JSON file as the To Do items's store. This leads to some concerns on performance, as we need to load the whole file in memory every time we want to manipulate 1 item.\n\nA proper SQL database would offer more flexibility for fetching and manipulating items with improved performance.\n\nSteps:\n- Use a local SQLite database;\n- Use the `sqlx` library for handling input sanitization; *optional\n- Create the DB schema;\n\t- Use sequential IDs;\n- Migrate current to-do items to the new DB;\n\n\n",
    "done_at": "",
    "created_at": "28 Jan 24 15:01 CET",
    "update_at": "06 May 24 23:41 CEST"
  },
  {
    "title": "[Add] Quitting Vim without saving the file crashes the app",
    "description": "\nWhen \"add\", Vim is open with the filename specified, so whenever it is saved, the file is then created in the File System.\n\nTurns out that if we leave the Vim session without saving the file, it panics the app, as it cannot locale the temporary file we specified.\n\n\n",
    "done_at": "26 Feb 24 18:15 CET",
    "created_at": "30 Jan 24 19:50 CET",
    "update_at": ""
  },
  {
    "title": "Write unit and integration tests for the actions",
    "description": "\n\n",
    "done_at": "",
    "created_at": "26 Feb 24 18:29 CET",
    "update_at": ""
  },
  {
    "title": "test db",
    "description": "",
    "done_at": "",
    "created_at": "12 May 24 20:26 CEST",
    "update_at": ""
  }
]
